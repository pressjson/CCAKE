23,26d22
< 	// added by Christopher Plumberg to get compilation
< 	double B_sub, S_sub, Q_sub;
< 	double B_an, S_an, Q_an;
< 
34d29
<   Vector<double,D> qmom;
43d37
< //	double vmag,vang;
58d51
<     double gamcalcbsq();
90c83
< 	Vector<double,D> gradBulk,gradrhoB,gradrhoS,gradrhoQ;           // Gradient of Bulk Viscosity
---
> 	Vector<double,D> gradBulk;           // Gradient of Bulk Viscosity    
95,97d87
<         double rhoB;	               // Baryon density
<         double rhoS;	               // strange density
<         double rhoQ;	               // electric charge density
106,107d95
< 	double drhoB_dt,drhoS_dt,drhoQ_dt;
< 
111d98
<         void calcbsq(double tin);
115d101
<         void bsqsvsigset(double tin, int i);
118d103
<         void return_bsqsv_A(int i = 0); //optional value added by C. Plumberg
162,168d146
< double Particle<D>::gamcalcbsq()
< {
< 	return sqrt( Norm2(u) + 1 );
< 
< }
< 
< template <int D>
218,242c196
<         qmom=((EOS.e()+ EOS.p())*gamma/sigma)*u;
<         EOS.update_s(s_in2, 0.0, 0.0, 0.0);
< 	if (true)
< 	{
< 		std::cerr << "Fix this!  Set muB=muQ=muS=0 just to make code compile!" << std::endl;
< 		exit(8);
< 	}
< 
< 
< 
< }
< 
< //  Computes gamma and velocity
< template <int D>
< void Particle<D>::calcbsq(double tin)
< {
< 
< 	      gamma=gamcalcbsq();
<         v =(1/gamma)*u;
<         double s_in2= eta/gamma/tin;
<         double B_in2= rhoB/gamma/tin;
<         double S_in2= rhoS/gamma/tin;
<         double Q_in2= rhoQ/gamma/tin;
<         qmom=((EOS.e()+ EOS.p())*gamma/sigma)*u;
<         EOS.update_s(s_in2, B_in2, S_in2, Q_in2);
---
>         EOS.update_s(s_in2);
262,307d215
< void Particle<D>::return_sv_A(int i)
< {
< 	eta_o_tau=setas/stauRelax;
< 
< 	Agam=EOS.w()-EOS.dwds()*(EOS.s()+ bigPI/EOS.T() )- zeta/tauRelax ;
< 
< 	Agam2=(Agam-eta_o_tau*(0.5-1/3.) -dwdsT1*shv.x[0][0])/gamma;
< 	Ctot=C+eta_o_tau*(1/g2-1)/2.;
< 
< }
< 
< template <int D>
< void Particle<D>::return_bsqsv_A(int i /*= 0*/)//optional value added by C. Plumberg
< {
< if (true){std::cerr << "Fix this! " <<__FILE__ << ":" << __LINE__ << std::endl;  exit(8);}
< 
< 	eta_o_tau=setas/stauRelax;
< 
< 	Agam=EOS.w()-EOS.dwds()*(EOS.s()+ bigPI/EOS.T() )- zeta/tauRelax ;//here goes a purple tag
< 
< 	Agam2=(Agam-eta_o_tau*(0.5-1/3.) -dwdsT1*shv.x[0][0])/gamma;
< 	Ctot=C+eta_o_tau*(1/g2-1)/2.;
< 
< }
< 
< template <int D>
< void Particle<D>::sigset(double tin)
< {
<         Agam2=Agam*gamma*gamma*(dsigma_dt/sigma -1/tin);
< 
< }
< 
< template <int D>
< void Particle<D>::vsigset(double tin)
< {
< 
<         bigPI = Bulk*sigma/gamma/tin ;
< 
<         C=EOS.w()+bigPI;
< 
<         returnv_A();
<         Agam2=Agam*gamma*gamma*(dsigma_dt/sigma -1./tin)+ bigPI/tauRelax;
< 
< }
< 
< template <int D>
336a245,256
> void Particle<D>::return_sv_A(int i)  
> { 
> 	eta_o_tau=setas/stauRelax;
> 
> 	Agam=EOS.w()-EOS.dwds()*(EOS.s()+ bigPI/EOS.T() )- zeta/tauRelax ;
> 	
> 	Agam2=(Agam-eta_o_tau*(0.5-1/3.) -dwdsT1*shv.x[0][0])/gamma;
> 	Ctot=C+eta_o_tau*(1/g2-1)/2.; 
> 	
> }
> 
> template <int D>
396c316,323
< void Particle<D>::bsqsvsigset(double tin,int i)
---
> void Particle<D>::sigset(double tin) 
> { 
>         Agam2=Agam*gamma*gamma*(dsigma_dt/sigma -1/tin); 
>         
> }
> 
> template <int D>
> void Particle<D>::vsigset(double tin) 
403c330
<         return_bsqsv_A();
---
>         returnv_A();
407a335,336
> 
> 
448,462d376
< 		if (true)
< 		{
< 			std::cerr << "Added missing curly bracket here to make code compile!  Double check that this is correct (and nothing else was inadvertently deleted from this section!" << std::endl;
< 			exit(8);
< 		}
< 	}//this is the missing curly bracket
< 
< 		//	for TECHQM/Gubser set svf=0.08
< 	}
<         else if (type==4) // BSQ+shear+bulk viscosity
< 	{
< 
< 		if ((etaconst==1)||(etaconst==3)||(etaconst==4)) {// const eta/s
< 			setas=2*EOS.s()*svf;  // svf defines eta/s const (the two is needed for the definition in the code, don't remove!
< 
496,504d409
< 		if (etaconst==6){
< 			double TC=155; // 173.9/197.3
< 			double temp=EOS.T()*197.3/TC;
< 			double z=pow(0.66*temp,2);
< 			double alpha=33./(12.*PI)*(z-1)/(z*log(z));
< 
< 		    	setas = EOS.s()*(0.0416762/pow(alpha,1.6)+ 0.0388977/pow(temp,5.1) );
< 
< 		}
525c430
< 		if (stauRelax <0.005) stauRelax=0.005 ;
---
> 		if (stauRelax <0.1) stauRelax=0.1 ;
544,547c449,452
< 		double min1=t2-1;
< 		if (t2>1.05) zeta=0.9*exp(-min1/0.025)+0.25*exp(-min1/0.13)+0.001;
< 		else if (t2<0.995) zeta=0.9*exp(min1/0.0025)+0.22*exp(min1/0.022)+0.03;
< 		else zeta=-13.77*t2*t2+27.55*t2-13.45;
---
> //		double min1=t2-1;
> //		if (t2>1.05) zeta=0.9*exp(-min1/0.025)+0.25*exp(-min1/0.13)+0.001;
> //		else if (t2<0.995) zeta=0.9*exp(min1/0.0025)+0.22*exp(min1/0.022)+0.03;
> //		else zeta=-13.77*t2*t2+27.55*t2-13.45;
548a454
> 		zeta=bvf*(1./3-EOS.cs2out(EOS.T()));
550,555c456
< 		tauRelax =5.*zeta/(pow((1-EOS.cs2out(EOS.T(), 0.0, 0.0, 0.0)),2)*(EOS.e()+EOS.p()));
<         if (true)
<         {
<                 std::cerr << "Fix this!  Set muB=muQ=muS=0 just to make code compile!" << std::endl;
<                 exit(8);
<         }
---
> 		tauRelax =zeta/(15.*pow((1-EOS.cs2out(EOS.T())),2)*(EOS.e()+EOS.p()));
580d480
< 		tauRelax =5.*zeta/(pow((1-EOS.cs2out(EOS.T(), 0.0, 0.0, 0.0)),2)*(EOS.e()+EOS.p()));
582,586c482,488
<         if (true)
<         {
<                 std::cerr << "Fix this!  Set muB=muQ=muS=0 just to make code compile!" << std::endl;
<                 exit(8);
<         }
---
>                 double zT0=176; //Tmax of zeta/s in MeV
> 		double zwidth=33; // width of zeta/s in MeV
>                 zeta=bvf/(1+pow((temp-zT0)/zwidth,2)); 
> 
> 
> 
> 		tauRelax =5.*zeta/(pow((1-EOS.cs2out(EOS.T())),2)*(EOS.e()+EOS.p()));
599a502,545
> 	
> 	
> 	
> 
> 		//stauRelax=1.5*setas/(EOS.e()+EOS.p()); // For TECHQM
> 		//stauRelax=2.5*setas/(EOS.e()+EOS.p()); // for gubser
> 	
> 	
> 	
> 		// definitions for zeta/s, tau_R bulk, eta/s, and tau_R shear
> 		// Boltzmann
> 		
>         //  Low Bulk viscosity with constant eta/s
> 	// AdS
> //              double cscheck=EOS.cs2out(EOS.T());
>               //zeta = 2*zconst*(1/3.-cscheck);
> //              double TC=200/197.3;	
> //		double temp=EOS.T()/TC;
> //	       	if( temp>TC){
> //            	setas = EOS.s()*(-0.289 + 0.288*temp + 0.0818*temp*temp);
> //        	}
> //        	else {
> //            	setas = EOS.s()*(0.681 - 0.0594*temp - 0.544 *temp*temp);
> //        	}
> //		//zeta= EOS.s()* 15*setas*pow((1/3.-cscheck),2);
> //		tauRelax = 9.*zeta/(EOS.e()-3*EOS.p());		
> //		stauRelax=5*setas/EOS.w();
>             
> //             setas = EOS.s()/4./PI;
> //        	stauRelax=5*setas/EOS.w();
>           //  tauRelax = 5.*zeta/EOS.w();
> //               zeta = 0.000;
>             //  zeta*=EOS.s();
> //              tauRelax =1.;
> //              setas =2.*0.08;
>  		//setas =0.0;
> //              setas*=EOS.s();
> //              stauRelax=0.75*setas/2./EOS.p();
>      // stauRelax=1;
> 
>         
>         
>        
>         
