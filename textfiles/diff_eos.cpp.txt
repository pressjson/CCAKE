1c1,2
< #include "eos.h"
---
> #ifndef _EOS_CPP_
> #define _EOS_CPP_
3,15c4,7
< #include "../splinter/include/datatable.h"
< #include "../splinter/include/bspline.h"
< #include "../splinter/include/bsplinebuilder.h"
< 
< #include <gsl/gsl_multiroots.h>
< #include <gsl/gsl_vector.h>
< #include <gsl/gsl_matrix.h>
< #include <gsl/gsl_permutation.h>
< #include <gsl/gsl_blas.h>
< #include <gsl/gsl_linalg.h>
< #include <iostream>
< #include <vector>
< #include <fstream>
---
> # include <cstdlib>
> # include <iostream>
> # include <iomanip>
> # include <cmath>
16a9,10
> #include <stdio.h>
> #include "eostables.h"
18,21c12
< using std::vector;
< using std::string;
< 
< using namespace SPLINTER;
---
> using namespace std;
23c14,15
< // Compile:         gcc eos4D.cpp -c -I /usr/include/eigen3 -Lsplinter/build -lm -lgsl -lgslcblas -lstdc++ -lsplinter-3-0
---
> //#include "fadiff.h"
> //using namespace fadbad;
26,29c18,21
< //EoS constructor. Builds the splines of degree "degree" for each quantitiy and initializes the position at (30,0,0,0)
< eos::eos(string quantityFile, string derivFile, int degree) : pSpline(4), entrSpline(4), bSpline(4), sSpline(4), qSpline(4), eSpline(4), cs2Spline(4), db2Spline(4), dq2Spline(4), ds2Spline(4), dt2Spline(4), dbdqSpline(4), dbdsSpline(4), dtdbSpline(4), dqdsSpline(4), dtdqSpline(4), dtdsSpline(4), tbqsPosition(4) {
<     init(quantityFile, derivFile, degree);
< }
---
> # include "newspline.hpp"
> #include "tables.h"
> #include "eos.h"
> #include <float.h>
31,118c23,39
< //EoS default constructor. This function exists to satisfy the compiler
< //This function should never be called unless init is called directly afterward
< eos::eos() : pSpline(4), entrSpline(4), bSpline(4), sSpline(4), qSpline(4), eSpline(4), cs2Spline(4), db2Spline(4), dq2Spline(4), ds2Spline(4), dt2Spline(4), dbdqSpline(4), dbdsSpline(4), dtdbSpline(4), dqdsSpline(4), dtdqSpline(4), dtdsSpline(4), tbqsPosition(4) {}
< 
< void eos::init(string quantityFile, string derivFile, int degree) {
<     std::ifstream dataFile;
<     std::ifstream derFile;
<     dataFile.open(quantityFile);
<     derFile.open(derivFile);
< 
<     DataTable psamples, entrsamples, bsamples, ssamples, qsamples, esamples, cs2samples;
<     DataTable db2samples, ds2samples, dq2samples, dt2samples, dbdssamples, dbdqsamples, dqdssamples, dtdssamples, dtdqsamples, dtdbsamples;
< 
<     double tit, muBit, muQit, muSit, pit, entrit, bit, sit, qit, eit, cs2it;
<     double db2it, dq2it, ds2it, dt2it, dbdqit, dbdsit, dqdsit, dtdbit, dtdsit, dtdqit;
<     vector<double> toAdd;
< 
<     int count = 0;
<     double hbarc = 197.327;
<     while (dataFile >> tit >> muBit >> muQit >> muSit >> pit >> entrit >> bit >> sit >> qit >> eit >> cs2it) {
<         derFile >> tit >> muBit >> muQit >> muSit >> db2it >> dq2it >> ds2it >> dbdqit >> dbdsit >> dqdsit >> dtdbit >> dtdqit >> dtdsit >> dt2it;  //read data from files
<         if(count == 0) {
<             minT = tit;
<             maxT = tit;
<             minMuB = muBit;
<             maxMuB = muBit;     //initilaize eos range variables
<             minMuQ = muQit;
<             maxMuQ = muQit;
<             minMuS = muSit;
<             maxMuS = muSit;
<             ++count;
<         }
<         if(maxT < tit) {
<             maxT = tit;
<         }
<         if(minT > tit) {
<             minT = tit;
<         }
<         if(maxMuB < muBit) {
<             maxMuB = muBit;
<         }
<         if(minMuB > muBit) {
<             minMuB = muBit;
<         }
<         if(maxMuQ < muQit) {
<             maxMuQ = muQit;
<         }
<         if(minMuQ > muQit) {
<             minMuQ = muQit;
<         }
<         if(maxMuS < muSit) {
<             maxMuS = muSit;
<         }
<         if(minMuS > muSit) {
<             minMuS = muSit;
<         }
< 
<         toAdd.push_back(tit);
<         toAdd.push_back(muBit);
<         toAdd.push_back(muQit);
<         toAdd.push_back(muSit);
< 
<         pit = pit*(tit*tit*tit*tit)/(hbarc*hbarc*hbarc);
<         entrit = entrit*(tit*tit*tit)/(hbarc*hbarc*hbarc);
<         bit = bit*(tit*tit*tit)/(hbarc*hbarc*hbarc);
<         sit = sit*(tit*tit*tit)/(hbarc*hbarc*hbarc);        //convert to MeV and fm units
<         qit = qit*(tit*tit*tit)/(hbarc*hbarc*hbarc);
<         eit = eit*(tit*tit*tit*tit)/(hbarc*hbarc*hbarc);
< 
<         psamples.addSample(toAdd, pit);
<         entrsamples.addSample(toAdd, entrit);
<         bsamples.addSample(toAdd, bit);
<         ssamples.addSample(toAdd, sit);
<         qsamples.addSample(toAdd, qit);
<         esamples.addSample(toAdd, eit);
<         cs2samples.addSample(toAdd, cs2it);
<         db2samples.addSample(toAdd, db2it);
<         dq2samples.addSample(toAdd, dq2it);     //add datapoint to table for spline builder
<         ds2samples.addSample(toAdd, ds2it);
<         dbdqsamples.addSample(toAdd, dbdqit);
<         dbdssamples.addSample(toAdd, dbdsit);
<         dqdssamples.addSample(toAdd, dqdsit);
<         dtdbsamples.addSample(toAdd, dtdbit);
<         dtdqsamples.addSample(toAdd, dtdqit);
<         dtdssamples.addSample(toAdd, dtdsit);
<         dt2samples.addSample(toAdd, dt2it);
<         toAdd.clear();
<     }
---
> eos::eos()
> {
> 	gg=3.297572;
> 	c=(16. +  7./2. *7.5 )/90. *cPI*cPI;
> 	cs=4./3.*pow(3.*c,0.25);
> 	cp=1./pow((4.*pow(c,0.25)),(4./3.));
> 	cp2=16./3.*cp;
> 	tempcutoff=65/197.3;
> 	ds1=-gg*pow(mpi,4)/(4.*cPI*cPI);
> 	es2=gg*pow(mpi,4)/(2.*cPI*cPI);
> 	es1=es2*3;
> 	ps1=gg/(2.*cPI*cPI);
> 	fourthirds=4./3.;
> 	onethird=1./3.;
> 	BIG=pow(1.,30.);
> 	
> };
120,139c41,55
<     dataFile.close();
<     derFile.close();
<     
<     pSpline = BSpline::Builder(psamples).degree(degree).build();
<     entrSpline = BSpline::Builder(entrsamples).degree(degree).build();
<     bSpline = BSpline::Builder(bsamples).degree(degree).build();
<     sSpline = BSpline::Builder(ssamples).degree(degree).build();
<     qSpline = BSpline::Builder(qsamples).degree(degree).build();
<     eSpline = BSpline::Builder(esamples).degree(degree).build();
<     cs2Spline = BSpline::Builder(cs2samples).degree(degree).build();
<     db2Spline = BSpline::Builder(db2samples).degree(degree).build();
<     dq2Spline = BSpline::Builder(dq2samples).degree(degree).build();
<     ds2Spline = BSpline::Builder(ds2samples).degree(degree).build();        //make splines from table
<     dbdqSpline = BSpline::Builder(dbdqsamples).degree(degree).build();
<     dbdsSpline = BSpline::Builder(dbdssamples).degree(degree).build();
<     dqdsSpline = BSpline::Builder(dqdssamples).degree(degree).build();
<     dtdbSpline = BSpline::Builder(dtdbsamples).degree(degree).build();
<     dtdqSpline = BSpline::Builder(dtdqsamples).degree(degree).build();
<     dtdsSpline = BSpline::Builder(dtdssamples).degree(degree).build();
<     dt2Spline = BSpline::Builder(dt2samples).degree(degree).build();
---
> double eos::efreeze()
> {
> 	temp=freezeoutT;
> 	double echeckout;
> 	if (typerem==table)
> 	{
> 		echeckout=spline(r8_T,y_e,temp,pos);
> 	}
> 	else if (typerem==ideal)
> 	{
> 		echeckout=3*c*pow(temp,4);
> 	}
> 	return echeckout;
> 	
> };
141,142d56
<     return;
< }
144,159c58,69
< void eos::tbqs(double setT, double setmuB, double setmuQ, double setmuS) {
<     if(setT < minT || setT > maxT) {
<         std::cout << "T = " << setT << " is out of range. Valid values are between [" << minT << "," << maxT << "]" << std::endl;
<         return;
<     }
<     if(setmuB < minMuB || setmuB > maxMuB) {
<         std::cout << "muB = " << setmuB << " is out of range. Valid values are between [" << minMuB << "," << maxMuB << "]" << std::endl;
<         return;
<     }
<     if(setmuQ < minMuQ || setmuQ > maxMuQ) {
<         std::cout << "muQ = " << setmuQ << " is out of range. Valid values are between [" << minMuQ << "," << maxMuQ << "]" << std::endl;
<         return;
<     }
<     if(setmuS < minMuS || setmuS > maxMuS) {
<         std::cout << "muS = " << setmuS << " is out of range. Valid values are between [" << minMuS << "," << maxMuS << "]" << std::endl;
<         return;
---
> double eos::sfreeze()
> {
>   temp=freezeoutT;
>   double scheckout;
>   if (typerem==table)
>     {
>       scheckout=spline(r8_T,y_s,temp,pos);
>     }
>   else if (typerem==ideal)
>     {
>       cout << "must setup still in EOS" << endl;
>       exit(1);
161,265c71,73
<     tbqsPosition(0) = setT;
<     tbqsPosition(1) = setmuB;
<     tbqsPosition(2) = setmuQ;
<     tbqsPosition(3) = setmuS;
<     
<     pVal = pSpline.eval(tbqsPosition);
<     BVal = bSpline.eval(tbqsPosition);
<     SVal = sSpline.eval(tbqsPosition);
<     QVal = qSpline.eval(tbqsPosition);
<     eVal = eSpline.eval(tbqsPosition);
<     cs2Val = cs2Spline.eval(tbqsPosition);
<     db2 = db2Spline.eval(tbqsPosition);
<     ds2 = ds2Spline.eval(tbqsPosition);
<     dq2 = dq2Spline.eval(tbqsPosition);
<     dt2 = dt2Spline.eval(tbqsPosition);
<     dbdq = dbdqSpline.eval(tbqsPosition);
<     dbds = dbdsSpline.eval(tbqsPosition);
<     dsdq = dqdsSpline.eval(tbqsPosition);
<     dtdb = dtdbSpline.eval(tbqsPosition);
<     dtds = dtdsSpline.eval(tbqsPosition);
<     dtdq = dtdqSpline.eval(tbqsPosition);
< 
<     entrVal = (eVal + pVal - setmuB*BVal - setmuQ*QVal - setmuS*SVal)/setT;
< }
< 
< double eos::p() {
<     return pVal;
< }
< 
< double eos::s() {
<     return entrVal;
< }
< 
< double eos::B() {
<     return BVal;
< }
< 
< double eos::S() {
<     return SVal;
< }
< 
< double eos::Q() {
<     return QVal;
< }
< 
< double eos::e() {
<     return eVal;
< }
< 
< double eos::cs2() {
<     return cs2Val;
< }
< 
< 
< double eos::w() {
<     return eVal + pVal;
< }
< 
< 
< 
< double eos::T() {
<     return tbqsPosition(0);
< }
< 
< double eos::muB() {
<     return tbqsPosition(1);
< }
< 
< double eos::muQ() {
<     return tbqsPosition(2);
< }
< 
< double eos::muS() {
<     return tbqsPosition(3);
< }
< 
< 
< 
< double eos::dwds() {
<     return T() + entrVal/dentr_dt() + BVal/dentr_dmub() + QVal/dentr_dmuq() + SVal/dentr_dmus();
< }
< 
< double eos::dwdB() {
<     return muB() + entrVal/db_dt() + BVal/db_dmub() + QVal/db_dmuq() + SVal/db_dmus();
< }
< 
< double eos::dwdS() {
<     return muS() + entrVal/ds_dt() + BVal/ds_dmub() + QVal/ds_dmuq() + SVal/ds_dmus();
< }
< 
< double eos::dwdQ() {
<     return muQ() + entrVal/dq_dt() + BVal/dq_dmub() + QVal/dq_dmuq() + SVal/dq_dmus();
< }
< 
< double eos::dentr_dt() {
<     return calc_term_1();
< }
< 
< double eos::dentr_dmub() {
<     return calc_term_2("b");
< }
< 
< double eos::dentr_dmuq() {
<     return calc_term_2("q");
< }
---
>   return scheckout;
>   
> };
267,269c75,100
< double eos::dentr_dmus() {
<     return calc_term_2("s");
< }
---
> double eos::s_terms_T(double Tt)
> {
> 	
> 	double etout,ptout;
> 	if (typerem==table)
> 	{
> 		if (Tt>ETH[0].T)
> 		{
> 		etout=spline(r8_T,y_e,Tt,pos);
> 		ptout=splinepos(y_T,y_p,Tt,pos);
> 		}
> 		else
> 		{
> 		etout=spline(r8_Tlow,y_elow,Tt,pos);
> 		ptout=splinepos(y_Tlow,y_plow,Tt,pos);
> 		}
> 	}
> 	else if (typerem==ideal)
> 	{
> 			
> 		ptout=c*pow(Tt,4);
> 		etout=3*ptout;
> 	}
> 	return (etout+ptout)/Tt;
> 	
> };
271,273c102,136
< double eos::db_dt() {
<     return calc_term_3("b");
< }
---
> double eos::cs2out(double Tt)
> {
> 	double out;
> 	if (typerem==table)
> 	{
> 		double Ttsub=Tt+0.0001;
> 		double ee1,ee2,pp1,pp2;
> 		
> 		if (Tt<ETH[0].T)
> 		{
> 		ee1=spline(r8_Tlow,y_elow,Tt,pos);
> 		pp1=splinepos(y_Tlow,y_plow,Tt,pos);
> 		
> 		ee2=spline(r8_Tlow,y_elow,Ttsub,pos);
> 		pp2=splinepos(y_Tlow,y_plow,Ttsub,pos);
> 		
> 		}
> 		else 
> 		{
> 		ee1=spline(r8_T,y_e,Tt,pos);
> 		pp1=splinepos(y_T,y_p,Tt,pos);
> 		
> 		ee2=spline(r8_T,y_e,Ttsub,pos);
> 		pp2=splinepos(y_T,y_p,Ttsub,pos);
> 		
> 		}
> 		out=(pp2-pp1)/(ee2-ee1);
> 	}
> 	else if (typerem==ideal)
> 	{
> 		out=1./3.;
> 	}
> 	return out;
> 	
> };
275,277c138,151
< double eos::db_dmub() {
<     return calc_term_4("b","b");
< }
---
> double eos::wfz(double Tt)
> {
> 	double out;
> 	if (typerem==table)
> 	{
> 		out=spline(r8_T,y_e,Tt,pos)+spline(r8_T,y_p,Tt,pos);
> 	}
> 	else if (typerem==ideal)
> 	{
> 		out=4*c*pow(Tt,4.);
> 	}
> 	return out;
> 	
> };
279,281d152
< double eos::db_dmuq() {
<     return calc_term_4("b","q");
< }
283,284c154,175
< double eos::db_dmus() {
<     return calc_term_4("b","s");
---
> double eos::s_out(double eIC)
> {
> 	double entro;
> 	if (typerem==ideal)
> 	{
> 		entro=cs*pow(eIC,0.75); 
> 	}
> 	else if (typerem==table)
> 	{
> 		
> 		if (eIC>echeck)
> 		{
> 			entro=spline(r8_e,y_s,eIC,pos);
> 		}
> 		else 
> 		{
> 			
> 			entro=spline(r8_elow,y_slow,eIC,pos);
> 		}
> 	}
> 		
> 	return entro;
287,288c178,199
< double eos::ds_dt() {
<     return calc_term_3("s");
---
> double eos::e_out(double sIC)
> {
>   double ent;
>   if (typerem==ideal)
>     {
>       ent=pow(sIC/cs,4./3.); 
>     }
>   else if (typerem==table)
>     {
>       
>       if (sIC>scheck)
> 	{
> 	  ent=spline(r8_s,y_e,sIC,pos);
> 	}
>       else 
> 	{
> 	  
> 	  ent=spline(r8_slow,y_elow,sIC,pos);
> 	}
>     }
>   
>   return ent;
291,292c202,205
< double eos::ds_dmub() {
<     return calc_term_4("s","b");
---
> void eos::pressure_ideal()
> {
> 	 pressure=pow( entropy,fourthirds)*cp;	 
> 	 
295,297d207
< double eos::ds_dmuq() {
<     return calc_term_4("s","q");
< }
299,301c209,210
< double eos::ds_dmus() {
<     return calc_term_4("s","s");
< }
---
> void eos::energy_ideal()
> {
303,305c212,213
< double eos::dq_dt() {
<     return calc_term_3("q");
< }
---
> 	energy=3*pressure;
> };
307,309c215,216
< double eos::dq_dmub() {
<     return calc_term_4("q","b");
< }
---
> void eos::temp_ideal()
> {
311,313c218,219
< double eos::dq_dmuq() {
<     return calc_term_4("q","q");
< }
---
> 	 temp=(energy+pressure)/entropy;
> };
315,317c221,240
< double eos::dq_dmus() {
<     return calc_term_4("q","s");
< }
---
> void eos::eosin(string type)
> {
> 	
> 	typerem=type;
> 	
> 	ideal="ideal";
> 	table="table";
> 	
> 	
> 	
> 	
> 	if (type==table)
> 	{
> 		typerem=table;
> 		scheck=ETH[0].s+(ETH[1].s-ETH[0].s)/10000000;
> 		echeck=ETH[0].e+(ETH[1].e-ETH[0].e)/10000000;
> 	}
> 	else typerem="ideal";
> 	
> };
319,342d241
< double eos::calc_term_1() {
<     gsl_vector *v = gsl_vector_alloc(3);
<     gsl_matrix *m = gsl_matrix_alloc(3,3);
< 
<     gsl_vector_set(v,0,dtdb);
<     gsl_vector_set(v,1,dtds);
<     gsl_vector_set(v,2,dtdq);
< 
<     gsl_matrix_set(m,0,0,db2);
<     gsl_matrix_set(m,0,1,dbds);
<     gsl_matrix_set(m,0,2,dbdq);
<     gsl_matrix_set(m,1,0,dbds);
<     gsl_matrix_set(m,1,1,ds2);
<     gsl_matrix_set(m,1,2,dsdq);
<     gsl_matrix_set(m,2,0,dbdq);
<     gsl_matrix_set(m,2,1,dsdq);
<     gsl_matrix_set(m,2,2,dq2);
< 
<     double toReturn = dt2 - deriv_mult_aTm_1b(v,m,v);
< 
<     gsl_matrix_free(m);
<     gsl_vector_free(v);
<     return toReturn;
< }
344,412d242
< double eos::calc_term_2(string i_char) {
<     gsl_vector *a = gsl_vector_alloc(3);
<     gsl_matrix *m = gsl_matrix_alloc(3,3);
<     gsl_vector *b = gsl_vector_alloc(3);
<     double toReturn = 0;
< 
<     if (i_char == "b") {
<         gsl_vector_set(a,0,dt2);
<         gsl_vector_set(a,1,dtds);
<         gsl_vector_set(a,2,dtdq);
< 
<         gsl_vector_set(b,0,db2);
<         gsl_vector_set(b,1,dbds);
<         gsl_vector_set(b,2,dbdq);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,dbds);
<         gsl_matrix_set(m,0,2,dbdq);
<         gsl_matrix_set(m,1,0,dtds);
<         gsl_matrix_set(m,1,1,ds2);
<         gsl_matrix_set(m,1,2,dsdq);
<         gsl_matrix_set(m,2,0,dtdq);
<         gsl_matrix_set(m,2,1,dsdq);
<         gsl_matrix_set(m,2,2,dq2);
< 
<         toReturn = dtdb - deriv_mult_aTm_1b(a,m,b);
<     } else if (i_char == "s") {
<         gsl_vector_set(a,0,dt2);
<         gsl_vector_set(a,1,dtdb);
<         gsl_vector_set(a,2,dtdq);
< 
<         gsl_vector_set(b,0,dbds);
<         gsl_vector_set(b,1,ds2);
<         gsl_vector_set(b,2,dsdq);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,db2);
<         gsl_matrix_set(m,0,2,dbdq);
<         gsl_matrix_set(m,1,0,dtds);
<         gsl_matrix_set(m,1,1,dbds);
<         gsl_matrix_set(m,1,2,dsdq);
<         gsl_matrix_set(m,2,0,dtdq);
<         gsl_matrix_set(m,2,1,dbdq);
<         gsl_matrix_set(m,2,2,dq2);
< 
<         toReturn = dtds - deriv_mult_aTm_1b(a,m,b);
<     } else if (i_char == "q") {
<         gsl_vector_set(a,0,dt2);
<         gsl_vector_set(a,1,dtdb);
<         gsl_vector_set(a,2,dtds);
< 
<         gsl_vector_set(b,0,dbdq);
<         gsl_vector_set(b,1,dsdq);
<         gsl_vector_set(b,2,dq2);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,db2);
<         gsl_matrix_set(m,0,2,dbdq);
<         gsl_matrix_set(m,1,0,dtds);
<         gsl_matrix_set(m,1,1,dbds);
<         gsl_matrix_set(m,1,2,dsdq);
<         gsl_matrix_set(m,2,0,dtdq);
<         gsl_matrix_set(m,2,1,dbdq);
<         gsl_matrix_set(m,2,2,dq2);
< 
<         toReturn = dtdq - deriv_mult_aTm_1b(a,m,b);
<     } else {
<         std::cout << "Error calculating derivative term 2" << std::endl;
<     }
414,418d243
<     gsl_vector_free(a);
<     gsl_matrix_free(m);
<     gsl_vector_free(b);
<     return toReturn;
< }
420,488c245,246
< double eos::calc_term_3(string i_char) {
<     gsl_vector *a = gsl_vector_alloc(3);
<     gsl_matrix *m = gsl_matrix_alloc(3,3);
<     gsl_vector *b = gsl_vector_alloc(3);
<     double toReturn = 0;
< 
<     if (i_char == "b") {
<         gsl_vector_set(a,0,db2);
<         gsl_vector_set(a,1,dbds);
<         gsl_vector_set(a,2,dbdq);
< 
<         gsl_vector_set(b,0,dt2);
<         gsl_vector_set(b,1,dtds);
<         gsl_vector_set(b,2,dtdq);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,dtds);
<         gsl_matrix_set(m,0,2,dtdq);
<         gsl_matrix_set(m,1,0,dbds);
<         gsl_matrix_set(m,1,1,ds2);
<         gsl_matrix_set(m,1,2,dsdq);
<         gsl_matrix_set(m,2,0,dbdq);
<         gsl_matrix_set(m,2,1,dsdq);
<         gsl_matrix_set(m,2,2,dq2);
< 
<         toReturn = dtdb - deriv_mult_aTm_1b(a,m,b);
<     } else if (i_char == "s") {
<         gsl_vector_set(a,0,dbds);
<         gsl_vector_set(a,1,ds2);
<         gsl_vector_set(a,2,dsdq);
< 
<         gsl_vector_set(b,0,dt2);
<         gsl_vector_set(b,1,dtdb);
<         gsl_vector_set(b,2,dtdq);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,dtds);
<         gsl_matrix_set(m,0,2,dtdq);
<         gsl_matrix_set(m,1,0,db2);
<         gsl_matrix_set(m,1,1,dbds);
<         gsl_matrix_set(m,1,2,dbdq);
<         gsl_matrix_set(m,2,0,dbdq);
<         gsl_matrix_set(m,2,1,dsdq);
<         gsl_matrix_set(m,2,2,dq2);
< 
<         toReturn = dtds - deriv_mult_aTm_1b(a,m,b);
<     } else if (i_char == "q") {
<         gsl_vector_set(a,0,dbdq);
<         gsl_vector_set(a,1,dsdq);
<         gsl_vector_set(a,2,dq2);
< 
<         gsl_vector_set(b,0,dt2);
<         gsl_vector_set(b,1,dtdb);
<         gsl_vector_set(b,2,dtds);
<         
<         gsl_matrix_set(m,0,0,dtdb);
<         gsl_matrix_set(m,0,1,dtds);
<         gsl_matrix_set(m,0,2,dtdq);
<         gsl_matrix_set(m,1,0,db2);
<         gsl_matrix_set(m,1,1,dbds);
<         gsl_matrix_set(m,1,2,dbdq);
<         gsl_matrix_set(m,2,0,dbds);
<         gsl_matrix_set(m,2,1,ds2);
<         gsl_matrix_set(m,2,2,dsdq);
< 
<         toReturn = dtdq - deriv_mult_aTm_1b(a,m,b);
<     } else {
<         std::cout << "Error calculating derivative term 3" << std::endl;
<     }
---
> void eos::temp_tab()
> {
490,493c248,249
<     gsl_vector_free(a);
<     gsl_matrix_free(m);
<     gsl_vector_free(b);
<     return toReturn;
---
>    temp=spline(r8_s,y_T,entropy,pos);
>    
496,701c252,254
< double eos::calc_term_4(string j_char, string i_char) {
<     gsl_vector *a = gsl_vector_alloc(3);
<     gsl_matrix *m = gsl_matrix_alloc(3,3);
<     gsl_vector *b = gsl_vector_alloc(3);
<     double toReturn = 0;
< 
<     if (i_char == "b") {
<         if(j_char == "b") {
<             gsl_vector_set(a,0,dtdb);
<             gsl_vector_set(a,1,dbds);
<             gsl_vector_set(a,2,dbdq);
< 
<             gsl_vector_set(b,0,dtdb);
<             gsl_vector_set(b,1,dbds);
<             gsl_vector_set(b,2,dbdq);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtds);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtds);
<             gsl_matrix_set(m,1,1,ds2);
<             gsl_matrix_set(m,1,2,dsdq);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dsdq);
<             gsl_matrix_set(m,2,2,dq2);
< 
<             toReturn = db2 - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "s") {
<             gsl_vector_set(a,0,dtds);
<             gsl_vector_set(a,1,ds2);
<             gsl_vector_set(a,2,dsdq);
< 
<             gsl_vector_set(b,0,dtdb);
<             gsl_vector_set(b,1,db2);
<             gsl_vector_set(b,2,dbdq);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtds);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,dbds);
<             gsl_matrix_set(m,1,2,dbdq);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dsdq);
<             gsl_matrix_set(m,2,2,dq2);
< 
<             toReturn = dbds - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "q") {
<             gsl_vector_set(a,0,dtdq);
<             gsl_vector_set(a,1,dsdq);
<             gsl_vector_set(a,2,dq2);
< 
<             gsl_vector_set(b,0,dtdb);
<             gsl_vector_set(b,1,db2);
<             gsl_vector_set(b,2,dbds);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtds);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,dbds);
<             gsl_matrix_set(m,1,2,dbdq);
<             gsl_matrix_set(m,2,0,dtds);
<             gsl_matrix_set(m,2,1,ds2);
<             gsl_matrix_set(m,2,2,dsdq);
< 
<             toReturn = dbdq - deriv_mult_aTm_1b(a,m,b);
<         } else {
<             std::cout << "Error calculating derivative term 4" << std::endl;
<         }
<     } else if (i_char == "s") {
<         if(j_char == "b") {
<             gsl_vector_set(a,0,dtdb);
<             gsl_vector_set(a,1,db2);
<             gsl_vector_set(a,2,dbdq);
< 
<             gsl_vector_set(b,0,dtds);
<             gsl_vector_set(b,1,ds2);
<             gsl_vector_set(b,2,dsdq);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtds);
<             gsl_matrix_set(m,1,1,dbds);
<             gsl_matrix_set(m,1,2,dsdq);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dbdq);
<             gsl_matrix_set(m,2,2,dq2);
< 
<             toReturn = dbds - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "s") {
<             gsl_vector_set(a,0,dtds);
<             gsl_vector_set(a,1,dbds);
<             gsl_vector_set(a,2,dsdq);
< 
<             gsl_vector_set(b,0,dtds);
<             gsl_vector_set(b,1,dbds);
<             gsl_vector_set(b,2,dsdq);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,db2);
<             gsl_matrix_set(m,1,2,dbdq);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dbdq);
<             gsl_matrix_set(m,2,2,dq2);
< 
<             toReturn = ds2 - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "q") {
<             gsl_vector_set(a,0,dtdq);
<             gsl_vector_set(a,1,dbdq);
<             gsl_vector_set(a,2,dq2);
< 
<             gsl_vector_set(b,0,dtds);
<             gsl_vector_set(b,1,dbds);
<             gsl_vector_set(b,2,ds2);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtdq);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,db2);
<             gsl_matrix_set(m,1,2,dbdq);
<             gsl_matrix_set(m,2,0,dtds);
<             gsl_matrix_set(m,2,1,dbds);
<             gsl_matrix_set(m,2,2,dsdq);
< 
<             toReturn = dsdq - deriv_mult_aTm_1b(a,m,b);
<         } else {
<             std::cout << "Error calculating derivative term 4" << std::endl;
<         }
<     } else if (i_char == "q") {
<         if(j_char == "b") {
<             gsl_vector_set(a,0,dtdb);
<             gsl_vector_set(a,1,db2);
<             gsl_vector_set(a,2,dbds);
< 
<             gsl_vector_set(b,0,dtdq);
<             gsl_vector_set(b,1,dsdq);
<             gsl_vector_set(b,2,dq2);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtds);
<             gsl_matrix_set(m,1,0,dtds);
<             gsl_matrix_set(m,1,1,dbds);
<             gsl_matrix_set(m,1,2,ds2);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dbdq);
<             gsl_matrix_set(m,2,2,dsdq);
< 
<             toReturn = dbdq - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "s") {
<             gsl_vector_set(a,0,dtds);
<             gsl_vector_set(a,1,dbds);
<             gsl_vector_set(a,2,ds2);
< 
<             gsl_vector_set(b,0,dtdq);
<             gsl_vector_set(b,1,dbdq);
<             gsl_vector_set(b,2,dq2);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtds);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,db2);
<             gsl_matrix_set(m,1,2,dbds);
<             gsl_matrix_set(m,2,0,dtdq);
<             gsl_matrix_set(m,2,1,dbdq);
<             gsl_matrix_set(m,2,2,dsdq);
< 
<             toReturn = dsdq - deriv_mult_aTm_1b(a,m,b);
<         } else if (j_char == "q") {
<             gsl_vector_set(a,0,dtdq);
<             gsl_vector_set(a,1,dbdq);
<             gsl_vector_set(a,2,dsdq);
< 
<             gsl_vector_set(b,0,dtdq);
<             gsl_vector_set(b,1,dbdq);
<             gsl_vector_set(b,2,dsdq);
<             
<             gsl_matrix_set(m,0,0,dt2);
<             gsl_matrix_set(m,0,1,dtdb);
<             gsl_matrix_set(m,0,2,dtds);
<             gsl_matrix_set(m,1,0,dtdb);
<             gsl_matrix_set(m,1,1,db2);
<             gsl_matrix_set(m,1,2,dbds);
<             gsl_matrix_set(m,2,0,dtds);
<             gsl_matrix_set(m,2,1,dbds);
<             gsl_matrix_set(m,2,2,ds2);
< 
<             toReturn = dq2 - deriv_mult_aTm_1b(a,m,b);
<         } else {
<             std::cout << "Error calculating derivative term 4" << std::endl;
<         }
<     } else {
<         std::cout << "Error calculating derivative term 4" << std::endl;
<     }
< 
<     gsl_vector_free(a);
<     gsl_matrix_free(m);
<     gsl_vector_free(b);
<     return toReturn;
---
> void eos::pressure_tab()
> {
>    pressure =splinepos(y_T,y_p,temp,pos);	
704,729c257,260
< double eos::deriv_mult_aTm_1b(gsl_vector* a, gsl_matrix* m, gsl_vector* b) {
<     gsl_permutation *p = gsl_permutation_alloc(3);
<     int s;
< 
<     // Compute the LU decomposition of this matrix
<     gsl_linalg_LU_decomp(m, p, &s);
< 
<     // Compute the  inverse of the LU decomposition
<     gsl_matrix *minv = gsl_matrix_alloc(3, 3);
<     gsl_linalg_LU_invert(m, p, minv);
< 
<     gsl_vector *y = gsl_vector_alloc(3);
< 
<     // Compute y = m^-1 @ b
<     gsl_blas_dgemv(CblasNoTrans,1,m,b,0,y);
< 
<     double toReturn = 0;
<     //compute toReturn = aT @ y
<     gsl_blas_ddot(a,y,&toReturn);
< 
<     gsl_vector_free(y);
<     gsl_matrix_free(minv);
<     gsl_permutation_free(p);
< 
<     return toReturn;
< }
---
> void eos::energy_tab()
> {
>    energy = splinepos(y_T,y_e,temp,pos);
> };
733c264
< 	Aout=w()-entrVal*dwds();
---
> 	Aout=w()-entropy*dwds();
738,951c269,286
< double eos::cs2out(double Tt, double muBin, double muQin, double muSin) {  //return cs2 given t and mu's
<     tbqs(Tt, muBin, muQin, muSin);
<     return cs2Val;
< } 
< 
< double eos::wfz(double Tt, double muBin, double muQin, double muSin) {   // return e + p for tbqs
<     tbqs(Tt, muBin, muQin, muSin);
<     return eVal + pVal;
< }
< 
< bool eos::update_s(double sin, double Bin, double Sin, double Qin) { //update the t and mu position based on input. Returns 1 if found, returns 0 if failed
<     if (rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     double t0 = tbqsPosition(0);
<     double mub0 = tbqsPosition(1);
<     double muq0 = tbqsPosition(2);
<     double mus0 = tbqsPosition(3);
<     double t10 = t0*.2;
<     double muB10 = mub0*.2;
<     double muQ10 = muq0*.2;
<     double muS10 = mus0*.2;
< 
<     //perturb T
<     if(t0 + t10 > maxT) {
<         tbqs(maxT - 1, mub0, muq0, mus0);
<     } else {
<         tbqs(t0 + t10, mub0, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     if(t0 - t10 < minT) {
<         tbqs(minT + 1, mub0, muq0, mus0);
<     } else {
<         tbqs(t0 - t10, mub0, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
< 
<     //perturb mub
<     if(mub0 + muB10 > maxMuB) {
<         tbqs(t0, maxMuB - 1, muq0, mus0);
<     } else {
<         tbqs(t0, mub0 + muB10, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     if(mub0 - muB10 < minMuB) {
<         tbqs(t0, minMuB + 1, muq0, mus0);
<     } else {
<         tbqs(t0, mub0 - muB10, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
< 
<     //perturn muq
<     if(muq0 + muQ10 > maxMuQ) {
<         tbqs(t0, mub0, maxMuQ - 1, mus0);
<     } else {
<         tbqs(t0, mub0, muq0 + muQ10, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     if(muq0 - muQ10 < minMuQ) {
<         tbqs(t0, mub0, minMuQ + 1, mus0);
<     } else {
<         tbqs(t0, mub0, muq0 - muQ10, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
< 
<     //perturb mus
<     if(mus0 + muS10 > maxMuS) {
<         tbqs(t0, mub0, muq0, maxMuS - 1);
<     } else {
<         tbqs(t0, mub0, muq0, mus0 + muS10);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     if(mus0 - muS10 < maxMuS) {
<         tbqs(t0, mub0, muq0, minMuS + 1);
<     } else {
<         tbqs(t0, mub0, muq0, mus0 - muS10);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
< 
<     //check mu = 0
<     tbqs(t0, 0, 0, 0);
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return true;
<     }
<     
<     tbqs(t0, mub0, muq0, mus0);
<     return false;
< }  
< 
< //double eos::s_out(double ein, double Bin, double Sin, double Qin) {   //update the t and mu position based on input. Returns entropy if found, returns -1 if failed
< 
< // first argument changed ein --> sin by C. Plumberg
< double eos::s_out(double sin, double Bin, double Sin, double Qin) {   //update the t and mu position based on input. Returns entropy if found, returns -1 if failed
<     if (rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
< if (true){std::cerr << "Fix this! " <<__FILE__ << ":" << __LINE__ << std::endl;  exit(8);}
< 
<     double t0 = tbqsPosition(0);
<     double mub0 = tbqsPosition(1);
<     double muq0 = tbqsPosition(2);
<     double mus0 = tbqsPosition(3);
<     double t10 = t0*.2;
<     double muB10 = mub0*.2;
<     double muQ10 = muq0*.2;
<     double muS10 = mus0*.2;
< 
<     //perturb T
<     if(t0 + t10 > maxT) {
<         tbqs(maxT - 1, mub0, muq0, mus0);
<     } else {
<         tbqs(t0 + t10, mub0, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
<     if(t0 - t10 < minT) {
<         tbqs(minT + 1, mub0, muq0, mus0);
<     } else {
<         tbqs(t0 - t10, mub0, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
< 
<     //perturb mub
<     if(mub0 + muB10 > maxMuB) {
<         tbqs(t0, maxMuB - 1, muq0, mus0);
<     } else {
<         tbqs(t0, mub0 + muB10, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
<     if(mub0 - muB10 < minMuB) {
<         tbqs(t0, minMuB + 1, muq0, mus0);
<     } else {
<         tbqs(t0, mub0 - muB10, muq0, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
< 
<     //perturn muq
<     if(muq0 + muQ10 > maxMuQ) {
<         tbqs(t0, mub0, maxMuQ - 1, mus0);
<     } else {
<         tbqs(t0, mub0, muq0 + muQ10, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
<     if(muq0 - muQ10 < minMuQ) {
<         tbqs(t0, mub0, minMuQ + 1, mus0);
<     } else {
<         tbqs(t0, mub0, muq0 - muQ10, mus0);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
< 
<     //perturb mus
<     if(mus0 + muS10 > maxMuS) {
<         tbqs(t0, mub0, muq0, maxMuS - 1);
<     } else {
<         tbqs(t0, mub0, muq0, mus0 + muS10);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
<     if(mus0 - muS10 < maxMuS) {
<         tbqs(t0, mub0, muq0, minMuS + 1);
<     } else {
<         tbqs(t0, mub0, muq0, mus0 - muS10);
<     }
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
< 
<     //check mu = 0
<     tbqs(t0, 0, 0, 0);
<     if(rootfinder4D(sin, 0, Bin, Sin, Qin, TOLERANCE, STEPS)) {
<         return entrVal;
<     }
<     
<     tbqs(t0, mub0, muq0, mus0);
<     return -1;
< }
< 
< double eos::s_terms_T(double Tt) { //return entropy at a given temperature for muB = muS = muQ = 0
<     tbqs(Tt, 0, 0, 0);
<     return entrVal;
< } 
< 
< 
< // UNCOMMENTED BY C. PLUMBERG
< void eos::eosin(std::string type) {}
< double eos::A() {return 0;}
---
> double eos::dwds_tab()
> {
> 	
> 	double dwdstab;
> 	if (entropy<scheck) 
> 	{
> 	dwdstab=splinepos(y_Tlow,y_dtdslow,temp,pos);
> 	}
> 	else
> 	{ 
> 	dwdstab=splinepos(y_T,y_dtds,temp,pos);
> 	}
> 	
> 	
> 	
> 	//dtds is actually T+s*dtds
> 	return dwdstab;
> };
952a288,293
> void eos::outpos()
> {
> 	
> 	cout << pos << " " << entropy << " " << scheck << endl;
> 	
> };
953a295,298
> double eos::dwds_ideal()
> {
> 	return 4/3.*temp;
> };
955,956d299
< double eos::efreeze() {return 0;}
< double eos::sfreeze() {return 0;}
957a301,314
> double eos::dwds()
> {
> 	double dw_ds;
> 	
> 	if (typerem==ideal)
> 		dw_ds=dwds_ideal();
> 	else if (typerem==table)
> 	{
> 		dw_ds=dwds_tab();
> 	}
> 		
> 	return dw_ds;
> 	
> };
961,999d317
< //struct to pass the target (E, rhoB, rhoQ, rhoS) into the rootfinder function
< struct rootfinder_parameters {
<     double eorEntGiven;          //these are the desired s and BSQ
<     double rhoBGiven;
<     double rhoQGiven;
<     double rhoSGiven;
<     BSpline eorEntSpline;        //the splines that contain interpolations over s, BSQ
<     BSpline rhoBSpline;
<     BSpline rhoQSpline;
<     BSpline rhoSSpline;
<     rootfinder_parameters();
<     rootfinder_parameters(double seteorEntGiven, double setRhoBGiven, double setRhoQGiven, double setRhoSGiven, BSpline setEntrSpline, BSpline setRhoBSPLine, BSpline setRhoQSpline, BSpline setRhoSSpline);
<     public:
<         void set(double setEorEntGiven, double setRhoBGiven, double setRhoQGiven, double setRhoSGiven, BSpline setEntrSpline, BSpline setRhoBSpline, BSpline setRhoQSpline, BSpline setRhoSSpline);
< };
< //Default constructor to make the compiler happy. Should never be called
< rootfinder_parameters::rootfinder_parameters() : eorEntSpline(4), rhoBSpline(4), rhoQSpline(4), rhoSSpline(4) {}
< //constructor which initializes all struct variables
< rootfinder_parameters::rootfinder_parameters(double setEorEntGiven, double setRhoBGiven, double setRhoQGiven, double setRhoSGiven, BSpline setEorEntSpline, BSpline setRhoBSpline, BSpline setRhoQSpline, BSpline setRhoSSpline) : eorEntSpline(4), rhoBSpline(4), rhoQSpline(4), rhoSSpline(4)
< {
<     eorEntGiven = setEorEntGiven;
<     rhoBGiven = setRhoBGiven;
<     rhoQGiven = setRhoQGiven;
<     rhoSGiven = setRhoSGiven;
<     eorEntSpline = setEorEntSpline;
<     rhoBSpline = setRhoBSpline;
<     rhoQSpline = setRhoQSpline;
<     rhoSSpline = setRhoSSpline;
< }
< void rootfinder_parameters::set(double setEorEntGiven, double setRhoBGiven, double setRhoQGiven, double setRhoSGiven, BSpline setEorEntSpline, BSpline setRhoBSpline, BSpline setRhoQSpline, BSpline setRhoSSpline) {
<     eorEntGiven = setEorEntGiven;
<     rhoBGiven = setRhoBGiven;
<     rhoQGiven = setRhoQGiven;
<     rhoSGiven = setRhoSGiven;
<     eorEntSpline = setEorEntSpline;
<     rhoBSpline = setRhoBSpline;
<     rhoQSpline = setRhoQSpline;
<     rhoSSpline = setRhoSSpline;
< }
1001,1027c319,323
< //helper function for the rootfinder. It provides the correct difference of s, rhoB, rhoQ, rhoS at a given (T, muB, muQ, muS) from the target
< //used when rootfinder is given an entropy, baryon density, charge density, strangeness density
< //x = (T, muB, muQ, muS), params = (sGiven, rhoBGiven, rhoQGiven, rhoSGiven), f becomes (s - sGiven, rhoB - rhoBGiven, rhoQ - rhoQGiven, rhoS - rhoSGiven)
< int rootfinder_fsbqs(const gsl_vector *x, void *params, gsl_vector *f);
< int rootfinder_fsbqs(const gsl_vector *x, void *params, gsl_vector *f) {
<     //x contains the next (T, muB, muS) coordinate to test
<     DenseVector tbqsToEval(4);
<     tbqsToEval(0) = gsl_vector_get(x,0);
<     tbqsToEval(1) = gsl_vector_get(x,1);      //convert x into densevector so it can be a BSpline evaluation point
<     tbqsToEval(2) = gsl_vector_get(x,2);
<     tbqsToEval(3) = gsl_vector_get(x,3);
< 
< 
<     double entrGiven, rhoBGiven, rhoQGiven, rhoSGiven, entr, rhoB, rhoQ, rhoS;
<     entrGiven = ((rootfinder_parameters*)params)->eorEntGiven;
<     rhoBGiven = ((rootfinder_parameters*)params)->rhoBGiven;            //given variables contain the target point
<     rhoQGiven = ((rootfinder_parameters*)params)->rhoQGiven;
<     rhoSGiven = ((rootfinder_parameters*)params)->rhoSGiven;
<     entr = (((rootfinder_parameters*)params)->eorEntSpline).eval(tbqsToEval);    //s, rhoB, rhoQ, rhoS contain the current point
<     rhoB = (((rootfinder_parameters*)params)->rhoBSpline).eval(tbqsToEval);
<     rhoQ = (((rootfinder_parameters*)params)->rhoQSpline).eval(tbqsToEval);
<     rhoS = (((rootfinder_parameters*)params)->rhoSSpline).eval(tbqsToEval);
< 
<     gsl_vector_set(f, 0, (entr - entrGiven)); //f[0] contains (s(T,muB,muQ,muS) - sGiven)
<     gsl_vector_set(f, 1, (rhoB - rhoBGiven)); //f[1] contains (rhoB(T,muB,muQ,muS) - rhoBGiven)
<     gsl_vector_set(f, 2, (rhoQ - rhoQGiven)); //f[2] contains (rhoQ(T,muB,muQ,muS) - rhoQGiven)
<     gsl_vector_set(f, 3, (rhoS - rhoSGiven)); //f[2] contains (rhoS(T,muB,muQ,muS) - rhoSGiven)
---
> eos::~eos()
> {
> 	
> 	
> };
1029,1030c325,328
<     return GSL_SUCCESS;
< }
---
> double eos::e()
> {
> 	return energy;
> };
1032,1057c330,333
< //helper function for the rootfinder. It provides the correct difference of E and rhoB at a given (T, muB, muQ, muS) from the target
< //used when rootfinder is given an energy density and a baryon density
< //x = (T, muB, muQ, muS), params = ((eGiven, rhoBGiven, rhoQGiven, rhoSGiven), f becomes (e - eGiven, rhoB - rhoBGiven, rhoQ - rhoQGiven, rhoS - rhoSGiven)
< int rootfinder_febqs(const gsl_vector *x, void *params, gsl_vector *f);
< int rootfinder_febqs(const gsl_vector *x, void *params, gsl_vector *f) {
<     //x contains the next (T, muB, muQ, muS) coordinate to test
<     DenseVector tbqsToEval(4);
<     tbqsToEval(0) = gsl_vector_get(x,0);
<     tbqsToEval(1) = gsl_vector_get(x,1);      //convert x into densevector so it can be a BSpline evaluation point
<     tbqsToEval(2) = gsl_vector_get(x,2);
<     tbqsToEval(3) = gsl_vector_get(x,3);
< 
<     double eGiven, rhoBGiven, rhoQGiven, rhoSGiven, e, rhoB, rhoQ, rhoS;
<     eGiven = ((rootfinder_parameters*)params)->eorEntGiven;
<     rhoBGiven = ((rootfinder_parameters*)params)->rhoBGiven;            //given variables contain the target point
<     rhoQGiven = ((rootfinder_parameters*)params)->rhoQGiven;
<     rhoSGiven = ((rootfinder_parameters*)params)->rhoSGiven;
<     e = (((rootfinder_parameters*)params)->eorEntSpline).eval(tbqsToEval);    //e, rhoB, rhoQ, rhoS contain the current point
<     rhoB = (((rootfinder_parameters*)params)->rhoBSpline).eval(tbqsToEval);
<     rhoQ = (((rootfinder_parameters*)params)->rhoQSpline).eval(tbqsToEval);
<     rhoS = (((rootfinder_parameters*)params)->rhoSSpline).eval(tbqsToEval);
< 
<     gsl_vector_set(f, 0, (e - eGiven)); //f[0] contains (e(T,muB,muQ,muS) - eGiven)
<     gsl_vector_set(f, 1, (rhoB - rhoBGiven)); //f[1] contains the (rhoB(T,muB,muQ,muS) - rhoBGiven)
<     gsl_vector_set(f, 2, (rhoQ - rhoQGiven)); //f[2] contains the (rhoQ(T,muB,muQ,muS) - rhoQGiven)
<     gsl_vector_set(f, 3, (rhoS - rhoSGiven)); //f[2] contains the (rho2(T,muB,muQ,muS) - rhoSGiven)
---
> double eos::p()
> {
> 	return pressure;
> };
1059,1060c335,338
<     return GSL_SUCCESS;
< }
---
> double eos::s()
> {
> 	return entropy;
> };
1061a340,343
> double eos::T()
> {
> 	return temp;
> };
1062a345,346
> double eos::A()
> {
1064c348,355
< bool eos::rootfinder4D(double entrGiven, double eGiven, double rhoBGiven, double rhoSGiven, double rhoQGiven, double error, size_t steps) {
---
> 	if (typerem==ideal)
> 		return Aideal();
> 	else if (typerem==table)
> 		return Atable();
> 	
> 		
> 	return 0.;
> };
1066,1094c357,359
<     //declare x = (T, muB, muS)
<     gsl_vector *x = gsl_vector_alloc(4);
<     gsl_vector_set(x, 0, T());
<     gsl_vector_set(x, 1, muB());
<     gsl_vector_set(x, 2, muQ());
<     gsl_vector_set(x, 3, muS());
< 
<     //initialize the rootfinder equation to the correct variable quantities
<     bool isEntropy = false;
<     if(eGiven == 0) {
<         isEntropy = true;
<     }
<     rootfinder_parameters p;
<     if(isEntropy) {
<         p.set(entrGiven, rhoBGiven, rhoQGiven, rhoSGiven, entrSpline, bSpline, qSpline, sSpline);
<         } else {
<         p.set(eGiven, rhoBGiven, rhoQGiven, rhoSGiven, eSpline, bSpline, qSpline, sSpline);
<         }
< 
<     //initialize multiroot solver
<     gsl_multiroot_fsolver *solver;
<     gsl_multiroot_function f;
<     if(isEntropy) {
<         f.f = &rootfinder_fsbqs;
<     } else {
<         f.f = &rootfinder_febqs;
<     }
<     f.n = 4;
<     f.params = &p;
---
> double eos::Aideal()
> {
> 	Aout=energy+pressure-cp2*pow(entropy,fourthirds);
1096,1097c361,362
<     solver = gsl_multiroot_fsolver_alloc(TYPE, 4);
<     gsl_multiroot_fsolver_set(solver, &f, x);
---
> 	return Aout;
> };
1099,1100d363
<     int status;
<     size_t iter = 0;
1102,1135d364
<     do {
<         ++iter;
<         status = gsl_multiroot_fsolver_iterate(solver);
< 
<         if(status) {
<             return 0;      //break if the rootfinder gets stuck
<         }
<         if(gsl_vector_get(solver->x, 0) < minT) {
<             return 0;
<         } else if(gsl_vector_get(solver->x, 0) > maxT) {
<             return 0;
<         } else if (gsl_vector_get(solver->x, 1) < minMuB) {
<             return 0;
<         } else if (gsl_vector_get(solver->x, 1) > maxMuB) {
<             return 0;
<         } else if (gsl_vector_get(solver->x, 2) < minMuQ) {     //break if the rootfinder goes out of bounds
<             return 0;
<         } else if (gsl_vector_get(solver->x, 2) > maxMuQ) {
<             return 0;
<         } else if (gsl_vector_get(solver->x, 3) < minMuS) {
<             return 0;
<         } else if (gsl_vector_get(solver->x, 3) > maxMuS) {
<             return 0;
<         }
< 
<         status = gsl_multiroot_test_residual(solver->f, error);
<     
<     } while (status == GSL_CONTINUE && iter < steps);
< 
< 
<     bool found = true; //to return variable
<     if(iter >= steps) {
<         found = false;
<     }
1137,1140c366,368
<     
<     if(found) {
<         tbqs(gsl_vector_get(solver->x, 0), gsl_vector_get(solver->x, 1), gsl_vector_get(solver->x, 2), gsl_vector_get(solver->x, 3));    //set T, muB, muQ, muS
<     }
---
> void eos::update_s(double s_in)
> {
> 	entropy=s_in;
1142,1146c370,399
<     //memory deallocation
<     gsl_multiroot_fsolver_free(solver);
<     gsl_vector_free(x);
<     return found;
< }
---
> 	
> 	if (typerem==ideal)
> 	{
> 		
> 		pressure_ideal();	
> 		energy_ideal();
> 		temp_ideal();
> 		
> 	}
> 	else if (typerem==table)
> 	{
> 		
> 		if (s_in<scheck)
> 		{
> 			
> 			tablow();
> 		}
> 		else
> 		{
> 		
> 		
> 		temp_tab();
> 		pressure_tab();
> 		energy_tab();
> 		}
> 		
> 	}
> 	epp();
> 	
> };
1147a401,403
> void eos::tablow()
> {
> 	temp=spline(r8_slow,y_Tlow,entropy,pos);
1148a405,406
> 	pressure =splinepos(y_Tlow,y_plow,temp,pos);	
>   	energy = splinepos(y_Tlow,y_elow,temp,pos);
1149a408
> };
1151a411,444
> double eos::dervs(double (eos::*f)(double) ,double x, double h,double & err)
> {
>  double out, con=1.4, con2=pow(con,2.), safe=2.;
>  double errt, fac,hh, a[NTAB][NTAB];
>  
>  if (h==0.)
>  {
>  	cout << "Error: In double dervs - h must be nonzero" << endl;
>  	exit(1);
>  }
>  hh=h; 
>  a[0][0]=((this->*f)(x+hh)-(this->*f)(x-hh))/(2.*hh);
>  err=BIG;
>  
>  for(int i=1;i<NTAB;i++)
>  {
>  	hh=hh/con;
>  	a[0][i]=((this->*f)(x+hh)-(this->*f)(x-hh))/(2.*hh);
>  	fac=con2;
>  	
>  	for (int j=1;j<=i;j++)
>  	{
>  		a[j][i]=(a[j-1][i]*fac-a[j-1][i-1])/(fac-1.);
>  		fac=con2*fac;
>  		errt=max(abs(a[j][i]-a[j-1][i]),abs(a[j][i]-a[j-1][i-1]));
>  		if (errt<=err)
>  		{
>  			err=errt;
>  			out=a[j][i];
>  		}
>  	}
>  	if (abs(a[i][i]-a[i-1][i-1])>=(safe*err)) return out;
>  }
>  return out;
1152a446
> };
1154,1198c448,483
< //struct to pass the target quantities into the rootfinder function
< struct quant_rootfinder_parameters {
<     double tGiven;
<     double muBGiven;
<     double muQGiven;
<     double muSGiven;
<     double quantGiven;          //the value we are looking for in the desired quantity
<     int whichIndep;
<     BSpline pSpline;        //the spine of the correct quantity
<     BSpline entrSpline;
<     BSpline eSpline;
<     string quantity;
<     quant_rootfinder_parameters();
<     quant_rootfinder_parameters(string setQuantity, int setWhichIndep, double setQuantGiven, double setT, double setmuB, double setmuQ, double setmuS, BSpline setPSpline, BSpline setEntrSpline, BSpline setESpline);
<     public:
<         void set(string setQuantity, int setWhichIndep, double setQuantGiven, double setT, double setmuB, double setmuQ, double setmuS, BSpline setPSpline, BSpline setEntrSpline, BSpline setESpline);
< };
< //Default constructor
< quant_rootfinder_parameters::quant_rootfinder_parameters() : pSpline(4), entrSpline(4), eSpline(4) {}
< //constructor which initializes all struct variables
< quant_rootfinder_parameters::quant_rootfinder_parameters(string setQuantity, int setWhichIndep, double setQuantGiven, double setT, double setmuB, double setmuQ, double setmuS, BSpline setPSpline, BSpline setEntrSpline, BSpline setESpline) : pSpline(4), entrSpline(4), eSpline(4)
< {
<     whichIndep = setWhichIndep;
<     quantity = setQuantity;
<     quantGiven = setQuantGiven;
<     pSpline = setPSpline;
<     entrSpline = setEntrSpline;
<     eSpline = setESpline;
<     tGiven = setT;
<     muBGiven = setmuB;
<     muQGiven = setmuQ;
<     muSGiven = setmuS;
< }
< void quant_rootfinder_parameters::set(string setQuantity, int setWhichIndep, double setQuantGiven, double setT, double setmuB, double setmuQ, double setmuS, BSpline setPSpline, BSpline setEntrSpline, BSpline setESpline) {
<     whichIndep = setWhichIndep;
<     quantity = setQuantity;
<     quantGiven = setQuantGiven;
<     pSpline = setPSpline;
<     entrSpline = setEntrSpline;
<     eSpline = setESpline;
<     tGiven = setT;
<     muBGiven = setmuB;
<     muQGiven = setmuQ;
<     muSGiven = setmuS;
< }
---
> double eos::dervsprint(double (eos::*f)(double) ,double x, double h,double & err)
> {
>  
>  double out, con=1.4, con2=pow(con,2.), safe=2.;
>  double errt, fac,hh, a[NTAB][NTAB];
>  
>  if (h==0.)
>  {
>  	cout << "Error: In double dervs - h must be nonzero" << endl;
>  	exit(1);
>  }
>  hh=h/2; 
>  a[0][0]=((this->*f)(x+hh)-(this->*f)(x-hh))/(2.*hh);
>  err=BIG;
>  
>  for(int i=1;i<NTAB;i++)
>  {
>  	hh=hh/con;
>  	a[0][i]=((this->*f)(x+hh)-(this->*f)(x-hh))/(2.*hh);
>  	fac=con2;
>  	
>  	for (int j=1;j<=i;j++)
>  	{
>  		a[j][i]=(a[j-1][i]*fac-a[j-1][i-1])/(fac-1.);
>  		fac=con2*fac;
>  		errt=max(abs(a[j][i]-a[j-1][i]),abs(a[j][i]-a[j-1][i-1]));
>  		cout << i << " " << j << " " << a[0][i] << " " << a[j][i] << " " << err << endl;
>  		if (errt<=err)
>  		{
>  			err=errt;
>  			out=a[j][i];
>  		}
>  	}
>  	if (abs(a[i][i]-a[i-1][i-1])>=(safe*err)) return out;
>  }
>  return out;
1200,1228c485
< //helper function for the rootfinder. It provides the correct difference of quantity from the target
< int quant_rootfinder_f(const gsl_vector *x, void *params, gsl_vector *f);
< int quant_rootfinder_f(const gsl_vector *x, void *params, gsl_vector *f) {
<     int whichIndep = ((quant_rootfinder_parameters*)params)->whichIndep;
<     //x contains the next (T, muB, muS) coordinate to test
<     DenseVector tbqsToEval(4);
<     if(whichIndep == 1) {
<         tbqsToEval(0) = gsl_vector_get(x,0);
<         tbqsToEval(1) = ((quant_rootfinder_parameters*)params)->muBGiven;      //convert x into densevector so it can be a BSpline evaluation point
<         tbqsToEval(2) = ((quant_rootfinder_parameters*)params)->muQGiven;
<         tbqsToEval(3) = ((quant_rootfinder_parameters*)params)->muSGiven;
<     } else if(whichIndep == 2) {
<         tbqsToEval(0) = ((quant_rootfinder_parameters*)params)->tGiven;
<         tbqsToEval(1) = gsl_vector_get(x,0);      //convert x into densevector so it can be a BSpline evaluation point
<         tbqsToEval(2) = ((quant_rootfinder_parameters*)params)->muQGiven;
<         tbqsToEval(3) = ((quant_rootfinder_parameters*)params)->muSGiven;
<     } else if(whichIndep == 3) {
<         tbqsToEval(0) = ((quant_rootfinder_parameters*)params)->tGiven;
<         tbqsToEval(1) = ((quant_rootfinder_parameters*)params)->muBGiven;      //convert x into densevector so it can be a BSpline evaluation point
<         tbqsToEval(2) = gsl_vector_get(x,0);
<         tbqsToEval(3) = ((quant_rootfinder_parameters*)params)->muSGiven;
<     } else {
<         tbqsToEval(0) = ((quant_rootfinder_parameters*)params)->tGiven;
<         tbqsToEval(1) = ((quant_rootfinder_parameters*)params)->muBGiven;      //convert x into densevector so it can be a BSpline evaluation point
<         tbqsToEval(2) = ((quant_rootfinder_parameters*)params)->muQGiven;
<         tbqsToEval(3) = gsl_vector_get(x,0);
<     }
<     
<     
---
> };
1230,1245d486
<     double quantGiven, quant;
<     if(((quant_rootfinder_parameters*)params)->quantity == "e") {
<         quantGiven = ((quant_rootfinder_parameters*)params)->quantGiven;
<         quant = (((quant_rootfinder_parameters*)params)->eSpline).eval(tbqsToEval);
<     } else if(((quant_rootfinder_parameters*)params)->quantity == "p") {
<         quantGiven = ((quant_rootfinder_parameters*)params)->quantGiven;
<         quant = (((quant_rootfinder_parameters*)params)->pSpline).eval(tbqsToEval);
<     } else if(((quant_rootfinder_parameters*)params)->quantity == "entr") {
<         quantGiven = ((quant_rootfinder_parameters*)params)->quantGiven;
<         quant = (((quant_rootfinder_parameters*)params)->entrSpline).eval(tbqsToEval);
<     } else if(((quant_rootfinder_parameters*)params)->quantity == "gibbs") {
<         quantGiven = ((quant_rootfinder_parameters*)params)->quantGiven;
<         quant = (((quant_rootfinder_parameters*)params)->eSpline).eval(tbqsToEval);
<         quant += (((quant_rootfinder_parameters*)params)->pSpline).eval(tbqsToEval);
<         quant -= ((((quant_rootfinder_parameters*)params)->entrSpline).eval(tbqsToEval))*tbqsToEval(0);
<     }
1247c488,493
<     gsl_vector_set(f, 0, (quant - quantGiven));
---
> double eos::h_calc(double x)
> {
> 	double ef;
> 	ef=DBL_EPSILON;
> 	
> 	if (x==0.) return 0.0001*pow(DBL_EPSILON,onethird);
1249,1250c495
<     return GSL_SUCCESS;
< }
---
>  	return pow(ef,onethird)*x;
1252c497
< bool eos::quant_rootfinder4D(double quantGiven, string quantType, int whichIndep, double error, size_t steps) {
---
> };
1254,1270c499,509
<     //declare x = T
<     gsl_vector *x = gsl_vector_alloc(1);
<     quant_rootfinder_parameters p;
<     if(whichIndep == 1) {
<         gsl_vector_set(x, 0, T());
<     } else if(whichIndep == 2) {
<         gsl_vector_set(x, 0, muB());
<     } else if(whichIndep == 3) {
<         gsl_vector_set(x, 0, muQ());
<     } else if(whichIndep == 4) {
<         gsl_vector_set(x, 0, muS());
<     } else {
<         std::cout << "Please select a gridded quantity to vary during search" << std::endl;
<         std::cout << "t = 1,  muB = 2,  muQ = 3,  muS = 4" << std::endl;
<         return 0;
<     }
<     p.set(quantType, whichIndep, quantGiven, T(), muB(), muQ(), muS(), pSpline, entrSpline, eSpline);
---
> double eos::e_plow(double s)
> {
> 	double e_sub,p_sub;
> 	
> 	
> 	e_sub = spline(r8_slow,y_elow,s,pos);
> 	p_sub = splinepos(y_slow,y_plow,s,pos);
> 	
> 	
> 	return e_sub+p_sub;
> };
1272,1333c511,521
<     //initialize multiroot solver
<     const gsl_multiroot_fsolver_type *type;
<     gsl_multiroot_fsolver *solver;
<     gsl_multiroot_function f;
<     f.f = &quant_rootfinder_f;
<     f.n = 1;
<     f.params = &p;
< 
<     //type options: dnewton, hybrids, hybrid, broyden
<     //the dnewton and broyden methods crash the program with a bad guess. Hybrid and hybrids do not
<     //dnewton works the fastest on guesses that it can successfully reach. Hybrids is faster than hybrid
<     //I am choosing hybrids because it is the most accurate. Hybrids is slower than dnewton, but more reliable
<     type = gsl_multiroot_fsolver_hybrids;
<     solver = gsl_multiroot_fsolver_alloc(type, 1);
<     gsl_multiroot_fsolver_set(solver, &f, x);
< 
<     int status;
<     size_t iter = 0;
< 
<     do {
<         ++iter;
<         status = gsl_multiroot_fsolver_iterate(solver);
< 
<         if(status) {
<             return 0;      //break if the rootfinder gets stuck
<         }
<         if(whichIndep == 1) {
<             if(gsl_vector_get(solver->x, 0) < minT) {
<                 return 0;
<             } else if(gsl_vector_get(solver->x, 0) > maxT) {
<                 return 0;
<             }
<         } else if(whichIndep == 2) {
<             if(gsl_vector_get(solver->x, 0) < minMuB) {
<                 return 0;
<             } else if(gsl_vector_get(solver->x, 0) > maxMuB) {
<                 return 0;
<             }
<         } else if(whichIndep == 3) {
<             if(gsl_vector_get(solver->x, 0) < minMuQ) {
<                 return 0;
<             } else if(gsl_vector_get(solver->x, 0) > maxMuQ) {
<                 return 0;
<             }
<         } else if(whichIndep == 4) {
<             if(gsl_vector_get(solver->x, 0) < minMuS) {
<                 return 0;
<             } else if(gsl_vector_get(solver->x, 0) > maxMuS) {
<                 return 0;
<             }
<         }
<         
< 
<         status = gsl_multiroot_test_residual(solver->f, error);
<     
<     } while (status == GSL_CONTINUE && iter < steps);
< 
< 
<     bool found = true; //to return variable
<     if(iter >= steps) {
<         found = false;
<     }
---
> double eos::e_ptable(double s)
> {
> 	double e_sub,p_sub;
> 	
> 	
> 	e_sub = spline(r8_s,y_e,s,pos);
> 	p_sub = splinepos(y_s,y_p,s,pos);
> 	
> 	
> 	return e_sub+p_sub;
> };
1335,1338c523
<     
<     if(found) {
<         tbqs(gsl_vector_get(solver->x, 0), muB(), muQ(), muS());    //set T, muB, muQ, muS
<     }
---
> #endif
1340,1344d524
<     //memory deallocation
<     gsl_multiroot_fsolver_free(solver);
<     gsl_vector_free(x);
<     return found;
< }
